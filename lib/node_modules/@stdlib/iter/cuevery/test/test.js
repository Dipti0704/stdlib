// /**
// * @license Apache-2.0
// *
// * Copyright (c) 2024 The Stdlib Authors.
// *
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// *
// *    http://www.apache.org/licenses/LICENSE-2.0
// *
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// */





'use strict';

var tape = require('tape');
var isIteratorLike = require('@stdlib/assert-is-iterator-like');
var array2iterator = require('@stdlib/array-to-iterator');
var iterCuEvery = require('./../lib');

tape('main export is a function', function test(t) {
    t.ok(true, __filename);
    t.strictEqual(typeof iterCuEvery, 'function', 'main export is a function');
    t.end();
});

tape('the function throws an error if provided an iterator argument which is not an iterator protocol-compliant object', function test(t) {
    var values = [
        '5',
        5,
        NaN,
        true,
        false,
        null,
        void 0,
        {},
        [],
        function noop() {}
    ];

    for (var i = 0; i < values.length; i++) {
        t.throws(badValue(values[i]), TypeError, 'throws an error when provided ' + values[i]);
    }
    t.end();

    function badValue(value) {
        return function badValue() {
            iterCuEvery(value);
        };
    }
});

tape('the function returns an iterator protocol-compliant object', function test(t) {
    var it = iterCuEvery(array2iterator([1, 2, 3]));
    t.equal(it.next.length, 0, 'has zero arity');

    for (var i = 0; i < 100; i++) {
        var r = it.next();
        t.equal(typeof r.value, 'boolean', 'returns a boolean');
        t.equal(typeof r.done, 'boolean', 'returns a boolean');
    }
    t.end();
});

tape('the function returns an iterator which cumulatively tests whether every iterated value is truthy', function test(t) {
    var values = [true, true, true, false, true, false, 1, 2, 3];
    var expected = [true, true, true, false, false, false, false, false, false];

    var it = iterCuEvery(array2iterator(values));
    t.equal(isIteratorLike(it), true, 'returns an iterator');

    for (var i = 0; i < values.length; i++) {
        t.equal(it.next().value, expected[i], 'returns expected value');
    }
    t.equal(it.next().done, true, 'returns expected value');
    t.end();
});





tape('the function returns an iterator which returns true if provided an "empty" iterator', function test(t) {
    var it = iterCuEvery(array2iterator([]));
    t.equal(isIteratorLike(it), true, 'returns an iterator');

    var r = it.next();
    t.equal(r.value, true, 'returns expected value');
    t.equal(r.done, true, 'returns expected value');

    t.end();
});

tape('the returned iterator has a return method for closing an iterator (no argument)', function test(t) {
    var it = iterCuEvery(array2iterator([1, 2, 3, 4]));

    var r = it.next();
    t.equal(r.value, true, 'returns expected value');
    t.equal(r.done, false, 'returns expected value');

    r = it.return();
    t.equal(r.value, true, 'returns expected value');
    t.equal(r.done, true, 'returns expected value');

    t.end();
});

tape('the returned iterator has a return method for closing an iterator (argument)', function test(t) {
    var it = iterCuEvery(array2iterator([1, 2, 3, 4]));

    var r = it.next();
    t.equal(r.value, true, 'returns expected value');
    t.equal(r.done, false, 'returns expected value');

    r = it.return('finished');
    t.equal(r.value, 'finished', 'returns expected value');
    t.equal(r.done, true, 'returns expected value');

    t.end();
});
