/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import iterCuEvery from './index';
//import isIteratorLike from '@stdlib/assert/is-iterator-like';

// Define a proper iterator for testing
function iterator() {
    let count = 0;
    const data = [true, true, true, false, true, false, 1, 2, 3];
    return {
        next: () => {
            if (count < data.length) {
                return { value: Boolean(data[count++]), done: false };
            }
            return { value: true, done: true };
        },
        return: (value?: any) => {
            return { value: value ?? true, done: true };
        }
    };
}

// TESTS //

// The function returns an iterator...
{
    iterCuEvery(iterator()); // $ExpectType Iterator
}

// The compiler throws an error if the function is provided a value other than an iterator protocol-compliant object...
{
    iterCuEvery(5 as any); // $ExpectError
    iterCuEvery(true as any); // $ExpectError
    iterCuEvery(null as any); // $ExpectError
    iterCuEvery(undefined as any); // $ExpectError
    iterCuEvery([] as any); // $ExpectError
    iterCuEvery({} as any); // $ExpectError
    //iterCuEvery((x: number): number => x as any as Iterator); // $ExpectError
}

// Test iterator with Symbol.iterator if supported
{
    const it = iterator();
    if (Symbol.iterator in it) {
        iterCuEvery(it); // $ExpectType Iterator
    }
}
