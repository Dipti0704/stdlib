// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Iterator as Iter, IterableIterator } from '@stdlib/types/iter';

// Define a union type representing both iterable and non-iterable iterators:
type Iterator = Iter | IterableIterator;

/**
* Returns an iterator which cumulatively tests whether every iterated value is truthy.
*
* @param iterator - input iterator
* @returns iterator
*
* @example
* var array2iterator = require( '@stdlib/array-to-iterator' );
*
* var it = iterCuEvery( array2iterator( [ true, true, true, false, true ] ) );
* // returns <Object>
*
* var v = it.next().value;
* // returns true
*
* v = it.next().value;
* // returns true
*
* v = it.next().value;
* // returns true
*
* v = it.next().value;
* // returns false
*
* v = it.next().value;
* // returns false
*
* v = it.next().done;
* // returns true
*/
declare function iterCuEvery( iterator: Iterator ): Iterator;

// EXPORTS //
export = iterCuEvery;
